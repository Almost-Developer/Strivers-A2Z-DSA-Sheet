Single Element in a Sorted Array

You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.
Return the single element that appears only once.
Your solution must run in O(log n) time and O(1) space.

Example 1:
Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2

Example 2:
Input: nums = [3,3,7,7,10,11,11]
Output: 10

Constraints:
1 <= nums.length <= 105
0 <= nums[i] <= 105

Solution.
/* Approach: 
1. break it into two parts and check fot the mid element index
2. if mid index even and next element is same then single element is present after the mid
3. if mid index and previous element is same then single element is present after the mid
4. incase mid point is not same with previous element or next element then we find our single element.
*/ 

class Solution {
    public int singleNonDuplicate(int[] nums) {
    if(nums.length==1) return nums[0];
    if(nums[0]!=nums[1]) return nums[0];
    if(nums[nums.length-1]!=nums[nums.length-2]) return nums[nums.length-1];

        int start = 0;
        int end = nums.length-2;

        while(start <= end) {
            int mid = (start+end)/2;
            if(nums[mid] != nums[mid+1] && nums[mid] != nums[mid-1]) {
                return nums[mid];
            }
            if((mid%2==0 && nums[mid] == nums[mid+1]) || 
            mid%2==1 && nums[mid] == nums[mid-1]) {
                start = mid+1;
            }
            else end = mid-1;
        }
        return -1;
    }
}
