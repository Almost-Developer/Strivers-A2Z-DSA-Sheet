Find Minimum in Rotated Sorted Array

Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:
[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].
Given the sorted rotated array nums of unique elements, return the minimum element of this array.
You must write an algorithm that runs in O(log n) time.

Example 1:
Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.

Example 2:
Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.

Example 3:
Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 

Constraints:
n == nums.length
1 <= n <= 5000
-5000 <= nums[i] <= 5000
All the integers of nums are unique.
nums is sorted and rotated between 1 and n times.

Solution.
/* Approach:
1. check the array is already sorted or not, if yes then return the first element of the array.
2. incase of the array is halfway sorted, store the first value from the sorted half and start looking for in the other half
3. for unsorted array store the mid valye and look for the othr half in the array. 
*/

class Solution {
    public int findMin(int[] nums) {
        int n = nums.length;
        int low = 0;
        int high = n-1;
        int potential = Integer.MAX_VALUE;

        while(low <= high) {
            int mid = (low+high)/2;

            //check if the array is already sorted, store first value
            if(nums[low] <= nums[high]) {
                potential = Math.min(potential, nums[low]);
                break;
            }

            //if the array is halfway sorted store first value and starting looking for the another half of the array
            if(nums[low] <= nums[mid]) {
                potential = Math.min(nums[low], potential);
                low = mid+1;
            }
            
            // incase of unsorted array store the mid value and start looking for the other half of the array
            else {
                potential = Math.min(potential, nums[mid]);
                high = mid-1;
            }
        }
        return potential;
    }
}
