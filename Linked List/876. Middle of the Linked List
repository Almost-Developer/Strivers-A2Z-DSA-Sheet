Middle of the Linked List

Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.

Example 1:
Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.

Example 2:
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
 
Constraints:
The number of nodes in the list is in the range [1, 100].
1 <= Node.val <= 100

Solution.
/* Approach:
1. take two pointer walk and run 
2. increment one pointer to one step and another to two step
3. when run pointer reach at the end
4. the walk pointer will go to the middle of the list
 */

class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode walk = head;
        ListNode run = head;
        while(run != null && run.next != null) {
            walk = walk.next;
            run = run.next.next;
        }
        return walk;
    }
}
